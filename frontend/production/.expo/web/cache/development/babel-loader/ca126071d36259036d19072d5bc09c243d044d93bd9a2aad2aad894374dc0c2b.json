{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar services = function services(_ref) {\n  var data = _ref.data;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Output Component 1\"\n    }), _jsxs(Text, {\n      children: [\"Data: \", JSON.stringify(data)]\n    })]\n  });\n};\nvar users = function users(_ref2) {\n  var data = _ref2.data;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Output Component 2\"\n    }), _jsxs(Text, {\n      children: [\"Data: \", JSON.stringify(data)]\n    })]\n  });\n};\nvar Results = function Results() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    jsonData = _useState2[0],\n    setJsonData = _useState2[1];\n  useEffect(function () {\n    var data = require(\"./data.json\");\n    setJsonData(data);\n  }, []);\n  var renderComponents = function renderComponents() {\n    if (!jsonData) {\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Text, {\n          children: \"Loading...\"\n        })\n      });\n    }\n    var typeOfUser = jsonData.type_of_user;\n    if (typeOfUser === 'Service') {\n      return _jsx(\"services\", {\n        data: jsonData\n      });\n    } else {\n      return _jsx(\"users\", {\n        data: jsonData\n      });\n    }\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: renderComponents()\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Results;","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","Text","jsx","_jsx","jsxs","_jsxs","services","_ref","data","style","styles","container","children","JSON","stringify","users","_ref2","Results","_useState","_useState2","_slicedToArray","jsonData","setJsonData","require","renderComponents","typeOfUser","type_of_user","create","flex","justifyContent","alignItems"],"sources":["/Users/pranavipanduga/NUS-NCS-Hackathon-2024/components/screens/Results.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\n\n// Sample component for Output 1\nconst services = ({ data }) => {\n  return (\n    <View style={styles.container}>\n      <Text>Output Component 1</Text>\n      <Text>Data: {JSON.stringify(data)}</Text>\n    </View>\n  );\n};\n\n// Sample component for Output 2\nconst users = ({ data }) => {\n  return (\n    <View style={styles.container}>\n      <Text>Output Component 2</Text>\n      <Text>Data: {JSON.stringify(data)}</Text>\n    </View>\n  );\n};\n\nconst Results = () => {\n  const [jsonData, setJsonData] = useState(null);\n\n  // Routing of the JSON file\n  useEffect(() => {\n    // Importing JSON file using require\n    const data = require('./data.json');\n    setJsonData(data);\n  }, []);\n\n  // Function to render components based on JSON key content\n  const renderComponents = () => {\n    if (!jsonData) {\n      return <View style={styles.container}><Text>Loading...</Text></View>;\n    }\n\n    // Check the value of the 'type_of_user' key\n    const typeOfUser = jsonData.type_of_user;\n\n    // Render different components based on the value of 'type_of_user'\n    if (typeOfUser === 'Service') {\n      return <services data={jsonData} />;\n    } else {\n      return <users data={jsonData} />;\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {renderComponents()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default Results;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAInD,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,IAAA,EAAiB;EAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EACtB,OACEH,KAAA,CAACN,IAAI;IAACU,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BT,IAAA,CAACF,IAAI;MAAAW,QAAA,EAAC;IAAkB,CAAM,CAAC,EAC/BP,KAAA,CAACJ,IAAI;MAAAW,QAAA,GAAC,QAAM,EAACC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;IAAA,CAAO,CAAC;EAAA,CACrC,CAAC;AAEX,CAAC;AAGD,IAAMO,KAAK,GAAG,SAARA,KAAKA,CAAAC,KAAA,EAAiB;EAAA,IAAXR,IAAI,GAAAQ,KAAA,CAAJR,IAAI;EACnB,OACEH,KAAA,CAACN,IAAI;IAACU,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BT,IAAA,CAACF,IAAI;MAAAW,QAAA,EAAC;IAAkB,CAAM,CAAC,EAC/BP,KAAA,CAACJ,IAAI;MAAAW,QAAA,GAAC,QAAM,EAACC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;IAAA,CAAO,CAAC;EAAA,CACrC,CAAC;AAEX,CAAC;AAED,IAAMS,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;EACpB,IAAAC,SAAA,GAAgCrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAG5BrB,SAAS,CAAC,YAAM;IAEd,IAAMU,IAAI,GAAGe,OAAO,cAAc,CAAC;IACnCD,WAAW,CAACd,IAAI,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMgB,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;IAC7B,IAAI,CAACH,QAAQ,EAAE;MACb,OAAOlB,IAAA,CAACJ,IAAI;QAACU,KAAK,EAAEC,MAAM,CAACC,SAAU;QAAAC,QAAA,EAACT,IAAA,CAACF,IAAI;UAAAW,QAAA,EAAC;QAAU,CAAM;MAAC,CAAM,CAAC;IACtE;IAGA,IAAMa,UAAU,GAAGJ,QAAQ,CAACK,YAAY;IAGxC,IAAID,UAAU,KAAK,SAAS,EAAE;MAC5B,OAAOtB,IAAA;QAAUK,IAAI,EAAEa;MAAS,CAAE,CAAC;IACrC,CAAC,MAAM;MACL,OAAOlB,IAAA;QAAOK,IAAI,EAAEa;MAAS,CAAE,CAAC;IAClC;EACF,CAAC;EAED,OACElB,IAAA,CAACJ,IAAI;IAACU,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC3BY,gBAAgB,CAAC;EAAC,CACf,CAAC;AAEX,CAAC;AAED,IAAMd,MAAM,GAAGV,UAAU,CAAC2B,MAAM,CAAC;EAC/BhB,SAAS,EAAE;IACTiB,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}